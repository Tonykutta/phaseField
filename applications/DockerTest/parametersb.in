# =================================================================================
# Set the number of dimensions (2 or 3 for a 2D or 3D calculation)
# =================================================================================
set Number of dimensions = 2

# =================================================================================
# Set the length of the domain in all three dimensions
# (Domain size Z ignored in 2D)
# =================================================================================
# Each axes spans from zero to the specified length
set Domain size X = 100
set Domain size Y = 100
set Domain size Z = 100

# =================================================================================
# Set the element parameters
# =================================================================================
# The number of elements in each direction is 2^(refineFactor) * subdivisions
# Subdivisions Z ignored in 2D
# For optimal performance, use refineFactor primarily to determine the element size
set Subdivisions X = 4
set Subdivisions Y = 4
set Subdivisions Z = 4

set Refine factor = 5

# Set the polynomial degree of the element (allowed values: 1, 2, or 3)
set Element degree = 1

# =================================================================================
# Set the adaptive mesh refinement parameters
# =================================================================================
# Set the flag determining if adaptive meshing is activated
set Mesh adaptivity = true

# Set the maximum and minimum level of refinement
# When adaptive meshing is enabled, the refine factor set in the block above is
# only used to generate the first pass of the mesh as the initial conditions are
# applied. It should be set somewhere between the max and min levels below.
set Max refinement level = 6
set Min refinement level = 4

# Set the number of time steps between remeshing operations
set Steps between remeshing operations = 1000



subsection Refinement criterion: c
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 0.01
    set Value upper bound = 0.99
end
subsection Refinement criterion: n1
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 0.01
    set Value upper bound = 0.99
end
subsection Refinement criterion: n2
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 0.01
    set Value upper bound = 0.99
end
subsection Refinement criterion: n3
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 0.01
    set Value upper bound = 0.99
end

subsection Refinement criterion: n4
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 0.01
    set Value upper bound = 0.99
end
subsection Refinement criterion: n5
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 0.01
    set Value upper bound = 0.99
end
subsection Refinement criterion: n6
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 0.01
    set Value upper bound = 0.99
end
subsection Refinement criterion: n7
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 0.01
    set Value upper bound = 0.99
end
subsection Refinement criterion: n8
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 0.01
    set Value upper bound = 0.99
end
subsection Refinement criterion: n9
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 0.01
    set Value upper bound = 0.99
end
subsection Refinement criterion: n10
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 0.01
    set Value upper bound = 0.99
end
subsection Refinement criterion: n11
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 0.01
    set Value upper bound = 0.99
end
subsection Refinement criterion: n12
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 0.01
    set Value upper bound = 0.99
end





# =================================================================================
# Set the time step parameters
# =================================================================================
# The size of the time step
set Time step = 2.0e-3

# The simulation ends when either the number of time steps is reached or the
# simulation time is reached.
set Number of time steps = 1000000

# =================================================================================
# Set the boundary conditions
# =================================================================================
# Set the boundary condition for each variable, where each variable is given by
# its name, as defined in equations.h. The four boundary condition
# types are NATURAL, DIRICHLET, NON_UNIFORM_DIRICHLET and PERIODIC. If all
# of the boundaries have the same boundary condition, only one boundary condition
# type needs to be given. If multiple boundary condition types are needed, give a
# comma-separated list of the types. The order is the miniumum of x, maximum of x,
# minimum of y, maximum of y, minimum of z, maximum of z (i.e left, right, bottom,
# top in 2D and left, right, bottom, top, front, back in 3D). The value of a
# Dirichlet BC is specfied in the following way -- DIRCHILET: val -- where 'val' is
# the desired value. If the boundary condition is NON_UNIFORM_DIRICHLET, the
# boundary condition should be specified in the appropriate function in 'ICs_and_BCs.h'.
# Example 1: All periodic BCs for variable 'c'
# set Boundary condition for variable c = PERIODIC
# Example 2: Zero-derivative BCs on the left and right, Dirichlet BCs with value
# 1.5 on the top and bottom for variable 'n' in 2D
# set Boundary condition for variable n = NATURAL, NATURAL, DIRICHLET: 1.5, DIRICHLET: 1.5

set Boundary condition for variable c = NATURAL
set Boundary condition for variable mu = NATURAL
set Boundary condition for variable n1 = NATURAL
set Boundary condition for variable n2 = NATURAL
set Boundary condition for variable n3 = NATURAL
set Boundary condition for variable n4 = NATURAL
set Boundary condition for variable n5 = NATURAL
set Boundary condition for variable n6 = NATURAL
set Boundary condition for variable n7 = NATURAL
set Boundary condition for variable n8 = NATURAL
set Boundary condition for variable n9 = NATURAL
set Boundary condition for variable n10 = NATURAL
set Boundary condition for variable n11 = NATURAL
set Boundary condition for variable n12 = NATURAL
# =================================================================================
# Set the model constants
# =================================================================================
# Set the user-defined model constants, which must have a counter-part given in
# customPDE.h. These are most often used in the residual equations in equations.h,
# but may also be used for initial conditions and nucleation calculations. The type
# options currently are DOUBLE, INT, BOOL, TENSOR, and [symmetry] ELASTIC CONSTANTS
# where [symmetry] is ISOTROPIC, TRANSVERSE, ORTHOTROPIC, or ANISOTROPIC.

set Model constant MnV = 0.1, DOUBLE
set Model constant gamma_s = 1.5, DOUBLE
set Model constant delta = 1.0, DOUBLE
set Model constant gamma_gb_koeff = 1.0, DOUBLE
set Model constant D_vap = 0.001, DOUBLE
set Model constant D_vol = 0.01, DOUBLE
set Model constant D_gb = 0.1, DOUBLE
set Model constant D_surf = 1.0, DOUBLE
set Model constant Au = 16.0, DOUBLE
set Model constant Bu = 1.0, DOUBLE
set Model constant k_nu = 1.0, DOUBLE
set Model constant k_cu = 10.0, DOUBLE
set Model constant Advection = true, BOOL
set Model constant NumIndex = 12, INT
set Model constant K = 100.0, DOUBLE
set Model constant mR = 1.0, DOUBLE
set Model constant mT = 500.0, DOUBLE
set Model constant tensor = true, BOOL
# Centers for points 1 and 2
set Model constant center1 = (35.72,45.49,50.0), TENSOR
set Model constant center2 = (41.43,86.38,50.0), TENSOR
set Model constant center3 = (58.9,70.0,50.0), TENSOR
set Model constant center4 = (13.96,54.77,50.0), TENSOR
set Model constant center5 = (56.37,46.47,50.0), TENSOR
set Model constant center6 = (26.26,73.85,50.0), TENSOR
set Model constant center7 = (54.09,29.19,50.0), TENSOR
set Model constant center8 = (35.86,17.89,50.0), TENSOR
set Model constant center9 = (80.66,58.59,50.0), TENSOR
set Model constant center10 = (22.58,29.62,50.0), TENSOR
set Model constant center11 = (76.14,20.43,50.0), TENSOR
set Model constant center12 = (71.9,44.46,50.0), TENSOR
# Radii for points 1 and 2
set Model constant radius1 = 15.0, DOUBLE
set Model constant radius2 = 5.0, DOUBLE
set Model constant radius3 = 18.0, DOUBLE
set Model constant radius4 = 8.0, DOUBLE
set Model constant radius5 = 5.0, DOUBLE
set Model constant radius6 = 14.0, DOUBLE
set Model constant radius7 = 9.0, DOUBLE
set Model constant radius8 = 12.0, DOUBLE
set Model constant radius9 = 6.0, DOUBLE
set Model constant radius10 = 5.0, DOUBLE
set Model constant radius11 = 14.0, DOUBLE
set Model constant radius12 = 10.0, DOUBLE
# Initial oncentration in the matrix
set Model constant matrix_concentration = 0.0, DOUBLE
# =================================================================================
# Set the output parameters
# =================================================================================
# Type of spacing between outputs ("EQUAL_SPACING", "LOG_SPACING", "N_PER_DECADE",
# or "LIST")
set Output condition = EQUAL_SPACING

# Number of times the program outputs the fields (total number for "EQUAL_SPACING"
# and "LOG_SPACING", number per decade for "N_PER_DECADE", ignored for "LIST")
set Number of outputs = 10000
set Number of checkpoints = 10000
# The number of time steps between updates being printed to the screen
set Skip print steps = 1000
set Load from a checkpoint = true
