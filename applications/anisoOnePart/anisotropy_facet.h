#define n_orients 112

template <int dim,int degree>void customPDE<dim,degree>::anisotropy(const dealii::Tensor<1,dim,dealii::VectorizedArray<double>>&normal,dealii::VectorizedArray<double> &gamma,dealii::Tensor<1, dim, dealii::VectorizedArray<double> > &dgammadnormal) const {

double orient[n_orients][3] = {{0.577350 ,0.577350,0.577350},
{-0.577350 ,0.577350,0.577350},
{0.577350 ,-0.577350,0.577350},
{-0.577350 ,-0.577350,0.577350},
{0.577350 ,0.577350,-0.577350},
{-0.577350 ,0.577350,-0.577350},
{0.577350 ,-0.577350,-0.577350},
{-0.577350 ,-0.577350,-0.577350},
{0.639602 ,0.639602,0.426401},
{-0.639602 ,0.639602,0.426401},
{0.639602 ,-0.639602,0.426401},
{-0.639602 ,-0.639602,0.426401},
{0.639602 ,0.639602,-0.426401},
{-0.639602 ,0.639602,-0.426401},
{0.639602 ,-0.639602,-0.426401},
{-0.639602 ,-0.639602,-0.426401},
{0.727607 ,0.485071,0.485071},
{-0.727607 ,0.485071,0.485071},
{0.727607 ,-0.485071,0.485071},
{-0.727607 ,-0.485071,0.485071},
{0.727607 ,0.485071,-0.485071},
{-0.727607 ,0.485071,-0.485071},
{0.727607 ,-0.485071,-0.485071},
{-0.727607 ,-0.485071,-0.485071},
{0.666667 ,0.666667,0.333333},
{-0.666667 ,0.666667,0.333333},
{0.666667 ,-0.666667,0.333333},
{-0.666667 ,-0.666667,0.333333},
{0.666667 ,0.666667,-0.333333},
{-0.666667 ,0.666667,-0.333333},
{0.666667 ,-0.666667,-0.333333},
{-0.666667 ,-0.666667,-0.333333},
{0.707107 ,0.707107,0.000000},
{-0.707107 ,0.707107,0.000000},
{0.707107 ,-0.707107,0.000000},
{-0.707107 ,-0.707107,0.000000},
{0.707107 ,0.707107,-0.000000},
{-0.707107 ,0.707107,-0.000000},
{0.707107 ,-0.707107,-0.000000},
{-0.707107 ,-0.707107,-0.000000},
{0.688247 ,0.688247,0.229416},
{-0.688247 ,0.688247,0.229416},
{0.688247 ,-0.688247,0.229416},
{-0.688247 ,-0.688247,0.229416},
{0.688247 ,0.688247,-0.229416},
{-0.688247 ,0.688247,-0.229416},
{0.688247 ,-0.688247,-0.229416},
{-0.688247 ,-0.688247,-0.229416},
{0.816497 ,0.408248,0.408248},
{-0.816497 ,0.408248,0.408248},
{0.816497 ,-0.408248,0.408248},
{-0.816497 ,-0.408248,0.408248},
{0.816497 ,0.408248,-0.408248},
{-0.816497 ,0.408248,-0.408248},
{0.816497 ,-0.408248,-0.408248},
{-0.816497 ,-0.408248,-0.408248},
{0.801784 ,0.534522,0.267261},
{-0.801784 ,0.534522,0.267261},
{0.801784 ,-0.534522,0.267261},
{-0.801784 ,-0.534522,0.267261},
{0.801784 ,0.534522,-0.267261},
{-0.801784 ,0.534522,-0.267261},
{0.801784 ,-0.534522,-0.267261},
{-0.801784 ,-0.534522,-0.267261},
{0.904534 ,0.301511,0.301511},
{-0.904534 ,0.301511,0.301511},
{0.904534 ,-0.301511,0.301511},
{-0.904534 ,-0.301511,0.301511},
{0.904534 ,0.301511,-0.301511},
{-0.904534 ,0.301511,-0.301511},
{0.904534 ,-0.301511,-0.301511},
{-0.904534 ,-0.301511,-0.301511},
{1.000000 ,0.000000,0.000000},
{-1.000000 ,0.000000,0.000000},
{1.000000 ,-0.000000,0.000000},
{-1.000000 ,-0.000000,0.000000},
{1.000000 ,0.000000,-0.000000},
{-1.000000 ,0.000000,-0.000000},
{1.000000 ,-0.000000,-0.000000},
{-1.000000 ,-0.000000,-0.000000},
{0.707107 ,0.707107,0.000000},
{-0.707107 ,0.707107,0.000000},
{0.707107 ,-0.707107,0.000000},
{-0.707107 ,-0.707107,0.000000},
{0.707107 ,0.707107,-0.000000},
{-0.707107 ,0.707107,-0.000000},
{0.707107 ,-0.707107,-0.000000},
{-0.707107 ,-0.707107,-0.000000},
{0.948683 ,0.316228,0.000000},
{-0.948683 ,0.316228,0.000000},
{0.948683 ,-0.316228,0.000000},
{-0.948683 ,-0.316228,0.000000},
{0.948683 ,0.316228,-0.000000},
{-0.948683 ,0.316228,-0.000000},
{0.948683 ,-0.316228,-0.000000},
{-0.948683 ,-0.316228,-0.000000},
{0.894427 ,0.447214,0.000000},
{-0.894427 ,0.447214,0.000000},
{0.894427 ,-0.447214,0.000000},
{-0.894427 ,-0.447214,0.000000},
{0.894427 ,0.447214,-0.000000},
{-0.894427 ,0.447214,-0.000000},
{0.894427 ,-0.447214,-0.000000},
{-0.894427 ,-0.447214,-0.000000},
{0.832050 ,0.554700,0.000000},
{-0.832050 ,0.554700,0.000000},
{0.832050 ,-0.554700,0.000000},
{-0.832050 ,-0.554700,0.000000},
{0.832050 ,0.554700,-0.000000},
{-0.832050 ,0.554700,-0.000000},
{0.832050 ,-0.554700,-0.000000},
{0.832050 ,-0.554700,-0.000000}};

double alpha[n_orients] = {0.474427,0.474427,0.474427,0.474427,0.474427,0.474427,0.474427,0.474427,
0.449735,0.449735,0.449735,0.449735,0.449735,0.449735,0.449735,0.449735,
0.439153,0.439153,0.439153,0.439153,0.439153,0.439153,0.439153,0.439153,
0.435626,0.435626,0.435626,0.435626,0.435626,0.435626,0.435626,0.435626,
0.407407,0.407407,0.407407,0.407407,0.407407,0.407407,0.407407,0.407407,
0.396825,0.396825,0.396825,0.396825,0.396825,0.396825,0.396825,0.396825,
0.379189,0.379189,0.379189,0.379189,0.379189,0.379189,0.379189,0.379189,
0.375661,0.375661,0.375661,0.375661,0.375661,0.375661,0.375661,0.375661,
0.368607,0.368607,0.368607,0.368607,0.368607,0.368607,0.368607,0.368607,
0.343915,0.343915,0.343915,0.343915,0.343915,0.343915,0.343915,0.343915,
0.340388,0.340388,0.340388,0.340388,0.340388,0.340388,0.340388,0.340388,
0.336861,0.336861,0.336861,0.336861,0.336861,0.336861,0.336861,0.336861,
0.333333,0.333333,0.333333,0.333333,0.333333,0.333333,0.333333,0.333333,
0.333333,0.333333,0.333333,0.333333,0.333333,0.333333,0.333333,0.333333
};
double w[n_orients] = {50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50};
gamma = constV(1.5);
for (unsigned int i=0; i<n_orients; ++i){
// mn is the dot product of the normal and the orientation vector
    scalarvalueType mn = constV(0.0);
    for (unsigned int j=0; j<dim; ++j){
        mn += orient[i][j]*normal[j];
    }
// Application of the heaviside function
// Vectorized array mn must be unrolled to evaluate conditional
    for (unsigned int j=0; j<mn.n_array_elements; ++j){
        if (mn[j] < 0.0) mn[j] = 0.0;
    }
// Subtracting terms corresponding to the ith orientation from gamma and the
// components of dgamma/dn
    gamma -= alpha[i]*std::pow(mn,w[i]);
    for (unsigned int j=0; j<dim; ++j){
        dgammadnormal[j] -= alpha[i]*w[i]*orient[i][j]*std::pow(mn,w[i]-1.0);
    }
}

}
