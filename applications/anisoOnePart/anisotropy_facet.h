// Number of orientation vectors used to generate anisotropy
#define n_orients 96

template <int dim,int degree>
void customPDE<dim,degree>::anisotropy(const dealii::Tensor<1, dim, dealii::VectorizedArray<double> > &normal,
                                        dealii::VectorizedArray<double> &gamma,
                                        dealii::Tensor<1, dim, dealii::VectorizedArray<double> > &dgammadnormal) const {

// Orientations
// Defining orientations in a static array greatly improves performance, but requires
// specification of n_orients by a macro (as is done here) or by hand

double orient[n_orients][3] = {{ 0.5774,0.5774,0.5774},{ -0.5774,0.5774,0.5774},
{ 0.5774,-0.5774,0.5774},{ -0.5774,-0.5774,0.5774},{ 0.5774,0.5774,-0.5774},{ -0.5774,0.5774,-0.5774},{ 0.5774,-0.5774,-0.5774},{ -0.5774,-0.5774,-0.5774},{ 0.6396,0.6396,0.4264},{ -0.6396,0.6396,0.4264},{ 0.6396,-0.6396,0.4264},{ -0.6396,-0.6396,0.4264},{ 0.6396,0.6396,-0.4264},{ -0.6396,0.6396,-0.4264},{ 0.6396,-0.6396,-0.4264},{ -0.6396,-0.6396,-0.4264},
{ 0.7276,0.4851,0.4851},
{ -0.7276,0.4851,0.4851},
{ 0.7276,-0.4851,0.4851},
{ -0.7276,-0.4851,0.4851},
{ -0.7276,0.4851,-0.4851},
{ -0.7276,0.4851,-0.4851},
{ 0.7276,-0.4851,-0.4851},
{ -0.7276,-0.4851,-0.4851},
{ 0.6667,0.6667,0.3333},
{ -0.6667,0.6667,0.3333},
{ 0.6667,-0.6667,0.3333},
{ -0.6667,-0.6667,0.3333},
{ 0.6667,0.6667,-0.3333},
{ -0.6667,0.6667,-0.3333},
{ 0.6667,-0.6667,-0.3333},
{ -0.6667,-0.6667,-0.3333},
{ 0.7071,0.7071,0.0},
{ -0.7071,0.7071,0.0},
{ 0.7071,-0.7071,0.0},
{ -0.7071,-0.7071,0.0},
{ 0.7071,0.7071,0.0},
{ -0.7071,0.7071,0.0},
{ 0.7071,-0.7071,0.0},
{ -0.7071,-0.7071,0.0},
{ 0.6882,0.6882,0.2294},
{ -0.6882,0.6882,0.2294},
{ 0.6882,-0.6882,0.2294},
{ -0.6882,-0.6882,0.2294},
{ 0.6882,0.6882,-0.2294},
{ -0.6882,0.6882,-0.2294},
{ 0.6882,-0.6882,-0.2294},
{ -0.6882,-0.6882,-0.2294},
{ 0.8165,0.4082,0.4082},
{ -0.8165,0.4082,0.4082},
{ 0.8165,-0.4082,0.4082},
{ -0.8165,-0.4082,0.4082},
{ 0.8165,0.4082,-0.4082},
{ -0.8165,0.4082,-0.4082},
{ 0.8165,-0.4082,-0.4082},
{ -0.8165,-0.4082,-0.4082},
{ 0.8018,0.5345,0.2673},
{ -0.8018,0.5345,0.2673},
{ 0.8018,-0.5345,0.2673},
{ -0.8018,-0.5345,0.2673},
{ 0.8018,0.5345,-0.2673},
{ -0.8018,0.5345,-0.2673},
{ 0.8018,-0.5345,-0.2673},
{ -0.8018,-0.5345,-0.2673},
{ 0.9045,0.3015,0.3015},
{ -0.9045,0.3015,0.3015},
{ 0.9045,-0.3015,0.3015},
{ -0.9045,-0.3015,0.3015},
{ 0.9045,0.3015,-0.3015},
{ -0.9045,0.3015,-0.3015},
{ 0.9045,-0.3015,-0.3015},
{ -0.9045,-0.3015,-0.3015},
{ 1.0,0.0,0.0},
{ -1.0,0.0,0.0},
{ 1.0,0.0,0.0},
{ -1.0,0.0,0.0},
{ 1.0,0.0,0.0},
{ -1.0,0.0,0.0},
{ 1.0,0.0,0.0},
{ -1.0,0.0,0.0},
{ 0.7071,0.7071,0.0},
{ -0.7071,0.7071,0.0},
{ 0.7071,-0.7071,0.0},
{ -0.7071,-0.7071,0.0},
{ 0.7071,0.7071,0.0},
{ -0.7071,0.7071,0.0},
{ 0.7071,-0.7071,0.0},
{ -0.7071,-0.7071,0.0},
{ 0.9487,0.3162,0.0},
{ -0.9487,0.3162,0.0},
{ 0.9487,-0.3162,0.0},
{ -0.9487,-0.3162,0.0},
{ 0.9487,0.3162,0.0},
{ -0.9487,0.3162,0.0},
{ 0.9487,-0.3162,0.0},
{ -0.9487,-0.3162,0.0}};


// Orientation parameters
double w[n_orients] = {50.0,50.0,50.0,50.0,50.0,50.0,50.0,50.0,
50.0,50.0,50.0,50.0,50.0,50.0,50.0,50.0,
50.0,50.0,50.0,50.0,50.0,50.0,50.0,50.0,
50.0,50.0,50.0,50.0,50.0,50.0,50.0,50.0,
50.0,50.0,50.0,50.0,50.0,50.0,50.0,50.0,
50.0,50.0,50.0,50.0,50.0,50.0,50.0,50.0,
50.0,50.0,50.0,50.0,50.0,50.0,50.0,50.0,
50.0,50.0,50.0,50.0,50.0,50.0,50.0,50.0,
50.0,50.0,50.0,50.0,50.0,50.0,50.0,50.0,
50.0,50.0,50.0,50.0,50.0,50.0,50.0,50.0,
50.0,50.0,50.0,50.0,50.0,50.0,50.0,50.0,
50.0,50.0,50.0,50.0,50.0,50.0,50.0,50.0};

double alpha[n_orients] ={0.211640211640212,0.211640211640212,0.211640211640212,0.211640211640212,0.211640211640212,0.211640211640212,0.211640211640212,0.211640211640212,
  0.174603174603175,0.174603174603175,0.174603174603175,0.174603174603175,0.174603174603175,0.174603174603175,0.174603174603175,0.174603174603175,
  0.158730158730159,0.158730158730159,0.158730158730159,0.158730158730159,0.158730158730159,0.158730158730159,0.158730158730159,0.158730158730159,
  0.153439153439154,0.153439153439154,0.153439153439154,0.153439153439154,0.153439153439154,0.153439153439154,0.153439153439154,0.153439153439154,
  0.111111111111111,0.111111111111111,0.111111111111111,0.111111111111111,0.111111111111111,0.111111111111111,0.111111111111111,0.111111111111111,
  0.095238095238095,0.095238095238095,0.095238095238095,0.095238095238095,0.095238095238095,0.095238095238095,0.095238095238095,0.095238095238095,
  0.068783068783069,0.068783068783069,0.068783068783069,0.068783068783069,0.068783068783069,0.068783068783069,0.068783068783069,0.068783068783069,
  0.063492063492064,0.063492063492064,0.063492063492064,0.063492063492064,0.063492063492064,0.063492063492064,0.063492063492064,0.063492063492064,
  0.052910052910053,0.052910052910053,0.052910052910053,0.052910052910053,0.052910052910053,0.052910052910053,0.052910052910053,0.052910052910053,
  0.015873015873016,0.015873015873016,0.015873015873016,0.015873015873016,0.015873015873016,0.015873015873016,0.015873015873016,0.015873015873016,
  0.010582010582011,0.010582010582011,0.010582010582011,0.010582010582011,0.010582010582011,0.010582010582011,0.010582010582011,0.010582010582011,
  0.005291005291005,0.005291005291005,0.005291005291005,0.005291005291005,0.005291005291005,0.005291005291005,0.005291005291005,0.005291005291005};

gamma = constV(1.0);
for (unsigned int i=0; i<n_orients; ++i){
// mn is the dot product of the normal and the orientation vector
    scalarvalueType mn = constV(0.0);
    for (unsigned int j=0; j<dim; ++j){
        mn += orient[i][j]*normal[j];
    }
// Application of the heaviside function
// Vectorized array mn must be unrolled to evaluate conditional
    for (unsigned int j=0; j<mn.n_array_elements; ++j){
        if (mn[j] < 0.0) mn[j] = 0.0;
    }
// Subtracting terms corresponding to the ith orientation from gamma and the
// components of dgamma/dn
    gamma -= alpha[i]*std::pow(mn,w[i]);
    for (unsigned int j=0; j<dim; ++j){
        dgammadnormal[j] -= alpha[i]*w[i]*orient[i][j]*std::pow(mn,w[i]-1.0);
    }
}

}
